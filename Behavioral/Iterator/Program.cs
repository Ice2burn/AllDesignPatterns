using System;

namespace Iterator
{
    /// <summary>
    /// Паттерн: Iterator (Итератор)
    /// Type: Behavioral (Поведенческий)
    /// О чём паттерн: вынос поведения обхода коллекции из самой коллекции в отдельный класса не
    ///                раскрывая внутреннего представления самой коллекции
    /// Плюсы:
    ///     + Упрощает доступ к коллекции, скрывает реализацию
    ///     + Вынос алгоритма обхода структуры данных в отдельную сущность (код более локализован)
    /// 
    /// Минусы:
    ///     - Дополнительный уровень абстракции ухудшает читабельность кода
    ///     - Не оправдан, если коллекцию можно обойти простым циклом (оверинжиниринг)
    ///     - (ВАЖНО!) В большинстве случаев должно хватать IEnumerable, IEnumerator, yield return
    /// 
    /// Когда использовать:
    ///     * Когда необходимо осуществить обход сложной структуры данных без раскрытия её 
    ///       внутренней структуры на клиенте
    ///     * Когда необходимо предоставить несколько вариантов перебора одной и той же коллекции
    ///       (обход в ширину, в высоту, по порядку, с конца,)
    ///     * Когда имеется набор различных коллекций, и надо обеспечить единый интерфейс для их перебора
    ///     
    /// </summary>
    class Program
    {
        static void Main(string[] args)
        {
            // Создаём коллекцию, обход которой будем производить. 
            ConcreteCollection collection = new ConcreteCollection();

            // Коллекцию можно сформировать и в конструкторе.
            collection[0] = "Элемент 1";
            collection[1] = "Элемент 2";
            collection[2] = "Элемент 3";
            collection[3] = "Элемент 4";

            // Создаём итератор
            Iterator i = collection.CreateIterator();

            // Обходим коллекцию итератором
            Console.WriteLine("Итерируем коллекцию через while:");
            object item1 = i.First();

            // Обход через while
            //while (item1 != null) // Можно итерировать, пока не получим пустой элемент или использовать счетчик
            while (!i.IsDone())
            {
                Console.WriteLine(item1);
                item1 = i.Next();
            }

            // Сбрасываем позицию в начало для повторного обхода коллекции
            i.Reset();

            Console.WriteLine("Итерируем коллекцию через for:");
            // Обход через for
            for (object item2 = i.First();
                !i.IsDone(); item2 = i.Next())
            {
                Console.WriteLine(item2);
            }
            
            Console.ReadKey();
        }
    }
}
